// Generated by kalamine on 2025-04-01
//
// This is a standalone XKB keymap file. To apply this keymap, use:
//   xkbcomp -w9 frgo.xkb_keymap $DISPLAY
//
// DO NOT COPY THIS INTO xkb/symbols: THIS WOULD MESS UP YOUR XKB CONFIG.
//
// File          : frgo.xkb_keymap
// Project page  : https://OneDeadKey.github.com/kalamine
// Author        : Kawamashi
// Version       : 3.0.5
// License       : WTFPL - Do What The Fuck You Want Public License
//
// French Ergo
//

xkb_keymap {
  xkb_keycodes      { include "evdev"    };
  xkb_types         { include "complete" };
  xkb_compatibility { include "complete" };

  // Base layer + dead key
  // ╭╌╌╌╌╌┰─────┬─────┬─────┬─────┬─────┰─────┬─────┬─────┬─────┬─────┰╌╌╌╌╌┬╌╌╌╌╌╮
  // ┆ Ç   ┃ 1   │ «   │ »   │ 4   │ 5   ┃ 6 ‚ │ 7 ‘ │ 8 ’ │ 9   │ …   ┃ /   ┆ *   ┆
  // ┆     ┃ 1 ß │ 2 ∞ │ 3 ñ │ 4 § │ 5 ¶ ┃ 6 ™ │ 7 £ │ 8 ° │ 9 © │ 0 € ┃ / ÷ ┆ * × ┆
  // ╰╌╌╌╌╌╂─────┼─────┼─────┼─────┼─────╂─────┼─────┼─────┼─────┼─────╂╌╌╌╌╌┼╌╌╌╌╌┤
  //       ┃ X   │ !   │ É   │ P   │ B   ┃ F „ │ M “ │ L ” │ ? ¿ │ : ¡ ┃ ≠ ≠ ┆ +   ┆
  //       ┃   ô │ , â │   î │   û │   µ ┃   " │   « │   » │ ’ • │ . · ┃ = ≈ ┆ + ± ┆
  //       ┠─────┼─────┼─────┼─────┼─────╂─────┼─────┼─────┼─────┼─────╂╌╌╌╌╌┼╌╌╌╌╌┤
  //       ┃ O   │ A   │ I ‑ │ T   │ G   ┃ V   │ S   │ N   │ R   │ U   ┃ -   ┆ ? ¿ ┆
  //       ┃   ê │   à │   - │   ù │  *µ ┃   ß │   ( │   ) │   ñ │   … ┃ - − ┆ ' • ┆
  // ╭╌╌╌╌╌╂─────┼─────┼─────┼─────┼─────╂─────┼─────┼─────┼─────┼─────╂╌╌╌╌╌┴╌╌╌╌╌╯
  // ┆ E   ┃ Q   │ Z   │ Y   │ D — │ J   ┃ K   │ C   │ H   │ W _ │ ;   ┃
  // ┆   è ┃   œ │   æ │   ï │   – │   @ ┃   € │   ç │  *¨ │   _ │**   ┃
  // ╰╌╌╌╌╌┸─────┴─────┴─────┴─────┴─────┸─────┴─────┴─────┴─────┴─────┚

  // AltGr layer
  // ╭╌╌╌╌╌┰─────┬─────┬─────┬─────┬─────┰─────┬─────┬─────┬─────┬─────┰╌╌╌╌╌┬╌╌╌╌╌╮
  // ┆     ┃   ¹ │   ² │   ³ │   ⁴ │   ⁵ ┃   ⁶ │   ⁷ │   ⁸ │   ⁹ │   ⁰ ┃     ┆     ┆
  // ┆     ┃   ₁ │   ₂ │   ₃ │   ₄ │   ₅ ┃   ₆ │   ₇ │   ₈ │   ₉ │   ₀ ┃   à ┆   ê ┆
  // ╰╌╌╌╌╌╂─────┼─────┼─────┼─────┼─────╂─────┼─────┼─────┼─────┼─────╂╌╌╌╌╌┼╌╌╌╌╌┤
  //       ┃  *^ │   ¬ │   ≠ │  *¤ │   ‰ ┃  *˚ │     │     │     │  *ˇ ┃     ┆     ┆
  //       ┃   ^ │   ! │   = │   $ │   % ┃   # │   < │   > │   ? │   : ┃     ┆     ┆
  //       ┠─────┼─────┼─────┼─────┼─────╂─────┼─────┼─────┼─────┼─────╂╌╌╌╌╌┼╌╌╌╌╌┤
  //       ┃   × │   ± │  *¯ │   ÷ │  */ ┃  *` │  *´ │     │  *˘ │     ┃     ┆     ┆
  //       ┃   * │   + │   - │   / │   \ ┃   ` │   ( │   ) │   ; │   ' ┃     ┆     ┆
  // ╭╌╌╌╌╌╂─────┼─────┼─────┼─────┼─────╂─────┼─────┼─────┼─────┼─────╂╌╌╌╌╌┴╌╌╌╌╌╯
  // ┆     ┃  *~ │     │     │  *” │     ┃     │  *¸ │  *, │  *˛ │     ┃
  // ┆   _ ┃   ~ │   | │   & │   " │   @ ┃     │   { │   } │   [ │   ] ┃
  // ╰╌╌╌╌╌┸─────┴─────┴─────┴─────┴─────┸─────┴─────┴─────┴─────┴─────┚

  partial alphanumeric_keys modifier_keys
  xkb_symbols "Kawa" {
    include "pc"
    include "inet(evdev)"

    // The “OneDeadKey” is an ISO_Level3_Latch, i.e. a “dead AltGr” key.
    // This is the only way to have a multi-purpose dead key with XKB.

    // The real AltGr key should be an ISO_Level5_Switch; however,
    // ISO_Level5_Switch does not work as expected when applying this layout
    // with xkbcomp, so let’s use two groups instead and make the AltGr key a
    // group selector.

    name[group1]= "French Ergo";
    name[group2]= "AltGr";

    key.type[group1] = "FOUR_LEVEL";
    key.type[group2] = "TWO_LEVEL";

    // Digits
    key <AE01> {[ 1               , 1               , ssharp          , U1E9E           ],[ U2081           , onesuperior     ]}; // 1 1 ß ẞ ₁ ¹
    key <AE02> {[ 2               , guillemotleft   , infinity        , VoidSymbol      ],[ U2082           , twosuperior     ]}; // 2 « ∞   ₂ ²
    key <AE03> {[ 3               , guillemotright  , ntilde          , Ntilde          ],[ U2083           , threesuperior   ]}; // 3 » ñ Ñ ₃ ³
    key <AE04> {[ 4               , 4               , section         , VoidSymbol      ],[ U2084           , U2074           ]}; // 4 4 §   ₄ ⁴
    key <AE05> {[ 5               , 5               , paragraph       , VoidSymbol      ],[ U2085           , U2075           ]}; // 5 5 ¶   ₅ ⁵
    key <AE06> {[ 6               , 6               , trademark       , U201A           ],[ U2086           , U2076           ]}; // 6 6 ™ ‚ ₆ ⁶
    key <AE07> {[ 7               , 7               , sterling        , U2018           ],[ U2087           , U2077           ]}; // 7 7 £ ‘ ₇ ⁷
    key <AE08> {[ 8               , 8               , degree          , U2019           ],[ U2088           , U2078           ]}; // 8 8 ° ’ ₈ ⁸
    key <AE09> {[ 9               , 9               , copyright       , VoidSymbol      ],[ U2089           , U2079           ]}; // 9 9 ©   ₉ ⁹
    key <AE10> {[ 0               , ellipsis        , EuroSign        , VoidSymbol      ],[ U2080           , U2070           ]}; // 0 … €   ₀ ⁰

    // Letters, first row
    key <AD01> {[ x               , X               , ocircumflex     , Ocircumflex     ],[ asciicircum     , dead_circumflex ]}; // x X ô Ô ^ ^
    key <AD02> {[ comma           , exclam          , acircumflex     , Acircumflex     ],[ exclam          , notsign         ]}; // , ! â Â ! ¬
    key <AD03> {[ eacute          , Eacute          , icircumflex     , Icircumflex     ],[ equal           , notequal        ]}; // é É î Î = ≠
    key <AD04> {[ p               , P               , ucircumflex     , Ucircumflex     ],[ dollar          , dead_currency   ]}; // p P û Û $ ¤
    key <AD05> {[ b               , B               , mu              , VoidSymbol      ],[ percent         , U2030           ]}; // b B µ   % ‰
    key <AD06> {[ f               , F               , quotedbl        , U201E           ],[ numbersign      , dead_abovering  ]}; // f F " „ # ˚
    key <AD07> {[ m               , M               , guillemotleft   , U201C           ],[ less            , lessthanequal   ]}; // m M « “ < ≤
    key <AD08> {[ l               , L               , guillemotright  , U201D           ],[ greater         , greaterthanequal]}; // l L » ” > ≥
    key <AD09> {[ U2019           , question        , U2022           , questiondown    ],[ question        , VoidSymbol      ]}; // ’ ? • ¿ ?
    key <AD10> {[ period          , colon           , periodcentered  , exclamdown      ],[ colon           , dead_caron      ]}; // . : · ¡ : ˇ

    // Letters, second row
    key <AC01> {[ o               , O               , ecircumflex     , Ecircumflex     ],[ asterisk        , multiply        ]}; // o O ê Ê * ×
    key <AC02> {[ a               , A               , agrave          , Agrave          ],[ plus            , plusminus       ]}; // a A à À + ±
    key <AC03> {[ i               , I               , minus           , U2011           ],[ minus           , dead_macron     ]}; // i I - ‑ - ˉ
    key <AC04> {[ t               , T               , ugrave          , Ugrave          ],[ slash           , division        ]}; // t T ù Ù / ÷
    key <AC05> {[ g               , G               , dead_greek      , VoidSymbol      ],[ backslash       , dead_stroke     ]}; // g G µ   \ /
    key <AC06> {[ v               , V               , ssharp          , U1E9E           ],[ grave           , dead_grave      ]}; // v V ß ẞ ` `
    key <AC07> {[ s               , S               , parenleft       , VoidSymbol      ],[ parenleft       , dead_acute      ]}; // s S (   ( ´
    key <AC08> {[ n               , N               , parenright      , VoidSymbol      ],[ parenright      , VoidSymbol      ]}; // n N )   )
    key <AC09> {[ r               , R               , ntilde          , Ntilde          ],[ semicolon       , dead_breve      ]}; // r R ñ Ñ ; ˘
    key <AC10> {[ u               , U               , ellipsis        , VoidSymbol      ],[ apostrophe      , VoidSymbol      ]}; // u U …   '

    // Letters, third row
    key <AB01> {[ q               , Q               , oe              , OE              ],[ asciitilde      , dead_tilde      ]}; // q Q œ Œ ~ ~
    key <AB02> {[ z               , Z               , ae              , AE              ],[ bar             , brokenbar       ]}; // z Z æ Æ | ¦
    key <AB03> {[ y               , Y               , idiaeresis      , Idiaeresis      ],[ ampersand       , VoidSymbol      ]}; // y Y ï Ï &
    key <AB04> {[ d               , D               , endash          , emdash          ],[ quotedbl        , dead_doubleacute]}; // d D – — " ˝
    key <AB05> {[ j               , J               , at              , VoidSymbol      ],[ at              , VoidSymbol      ]}; // j J @   @
    key <AB06> {[ k               , K               , EuroSign        , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; // k K €
    key <AB07> {[ c               , C               , ccedilla        , Ccedilla        ],[ braceleft       , dead_cedilla    ]}; // c C ç Ç { ¸
    key <AB08> {[ h               , H               , dead_diaeresis  , VoidSymbol      ],[ braceright      , dead_belowcomma ]}; // h H ¨   } ,
    key <AB09> {[ w               , W               , underscore      , underscore      ],[ bracketleft     , dead_ogonek     ]}; // w W _ _ [ ˛
    key <AB10> {[ ISO_Level3_Latch, semicolon       , VoidSymbol      , VoidSymbol      ],[ bracketright    , VoidSymbol      ]}; // ' ;     ]

    // Pinky keys
    key <AE11> {[ slash           , slash           , division        , VoidSymbol      ],[ agrave          , Agrave          ]}; // / / ÷   à À
    key <AE12> {[ asterisk        , asterisk        , multiply        , VoidSymbol      ],[ ecircumflex     , Ecircumflex     ]}; // * * ×   ê Ê
    key <AE13> {[ VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; //
    key <AD11> {[ equal           , notequal        , U2248           , notequal        ],[ VoidSymbol      , VoidSymbol      ]}; // = ≠ ≈ ≠
    key <AD12> {[ plus            , plus            , plusminus       , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; // + + ±
    key <AC11> {[ minus           , minus           , U2212           , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; // - - −
    key <AB11> {[ VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; //
    key <TLDE> {[ ccedilla        , Ccedilla        , VoidSymbol      , VoidSymbol      ],[ VoidSymbol      , VoidSymbol      ]}; // ç Ç
    key <BKSL> {[ apostrophe      , question        , U2022           , questiondown    ],[ VoidSymbol      , VoidSymbol      ]}; // ' ? • ¿
    key <LSGT> {[ e               , E               , egrave          , Egrave          ],[ underscore      , VoidSymbol      ]}; // e E è È _

    // Space bar
    key <SPCE> {[ space           , U202F           , minus           , minus           ],[ space           , nobreakspace    ]}; //     - -

    // AltGr
    // Note: the `ISO_Level5_Latch` here is meaningless but helps with Chromium.
    key <RALT> {
      type = "TWO_LEVEL",
      symbols = [ ISO_Level5_Latch, ISO_Level5_Latch ],
      actions = [ SetGroup(group=2), SetGroup(group=2) ]
    };
  };
};
// vim: ft=xkb:fdm=indent:ts=2:nowrap
