// Generated by kalamine on 2025-04-01
//
// This XKB symbols file should be copied to:
//     /usr/share/X11/xkb/symbols/custom
// or
//     $XKB_CONFIG_ROOT/symbols/custom
//
// File          : frgo.xkb_symbols
// Project page  : https://OneDeadKey.github.com/kalamine
// Author        : Kawamashi
// Version       : 3.0.5
// License       : WTFPL - Do What The Fuck You Want Public License
//
// French Ergo
//
// Base layer + dead key
// ╭╌╌╌╌╌┰─────┬─────┬─────┬─────┬─────┰─────┬─────┬─────┬─────┬─────┰╌╌╌╌╌┬╌╌╌╌╌╮
// ┆ Ç   ┃ 1   │ «   │ »   │ 4   │ 5   ┃ 6 ‚ │ 7 ‘ │ 8 ’ │ 9   │ …   ┃ /   ┆ *   ┆
// ┆     ┃ 1 ß │ 2 ∞ │ 3 ñ │ 4 § │ 5 ¶ ┃ 6 ™ │ 7 £ │ 8 ° │ 9 © │ 0 € ┃ / ÷ ┆ * × ┆
// ╰╌╌╌╌╌╂─────┼─────┼─────┼─────┼─────╂─────┼─────┼─────┼─────┼─────╂╌╌╌╌╌┼╌╌╌╌╌┤
//       ┃ X   │ !   │ É   │ P   │ B   ┃ F „ │ M “ │ L ” │ ? ¿ │ : ¡ ┃ ≠ ≠ ┆ +   ┆
//       ┃   ô │ , â │   î │   û │   µ ┃   " │   « │   » │ ’ • │ . · ┃ = ≈ ┆ + ± ┆
//       ┠─────┼─────┼─────┼─────┼─────╂─────┼─────┼─────┼─────┼─────╂╌╌╌╌╌┼╌╌╌╌╌┤
//       ┃ O   │ A   │ I ‑ │ T   │ G   ┃ V   │ S   │ N   │ R   │ U   ┃ -   ┆ ? ¿ ┆
//       ┃   ê │   à │   - │   ù │  *µ ┃   ß │   ( │   ) │   ñ │   … ┃ - − ┆ ' • ┆
// ╭╌╌╌╌╌╂─────┼─────┼─────┼─────┼─────╂─────┼─────┼─────┼─────┼─────╂╌╌╌╌╌┴╌╌╌╌╌╯
// ┆ E   ┃ Q   │ Z   │ Y   │ D — │ J   ┃ K   │ C   │ H   │ W _ │ ;   ┃
// ┆   è ┃   œ │   æ │   ï │   – │   @ ┃   € │   ç │  *¨ │   _ │**   ┃
// ╰╌╌╌╌╌┸─────┴─────┴─────┴─────┴─────┸─────┴─────┴─────┴─────┴─────┚
//
// AltGr layer
// ╭╌╌╌╌╌┰─────┬─────┬─────┬─────┬─────┰─────┬─────┬─────┬─────┬─────┰╌╌╌╌╌┬╌╌╌╌╌╮
// ┆     ┃   ¹ │   ² │   ³ │   ⁴ │   ⁵ ┃   ⁶ │   ⁷ │   ⁸ │   ⁹ │   ⁰ ┃     ┆     ┆
// ┆     ┃   ₁ │   ₂ │   ₃ │   ₄ │   ₅ ┃   ₆ │   ₇ │   ₈ │   ₉ │   ₀ ┃   à ┆   ê ┆
// ╰╌╌╌╌╌╂─────┼─────┼─────┼─────┼─────╂─────┼─────┼─────┼─────┼─────╂╌╌╌╌╌┼╌╌╌╌╌┤
//       ┃  *^ │   ¬ │   ≠ │  *¤ │   ‰ ┃  *˚ │     │     │     │  *ˇ ┃     ┆     ┆
//       ┃   ^ │   ! │   = │   $ │   % ┃   # │   < │   > │   ? │   : ┃     ┆     ┆
//       ┠─────┼─────┼─────┼─────┼─────╂─────┼─────┼─────┼─────┼─────╂╌╌╌╌╌┼╌╌╌╌╌┤
//       ┃   × │   ± │  *¯ │   ÷ │  */ ┃  *` │  *´ │     │  *˘ │     ┃     ┆     ┆
//       ┃   * │   + │   - │   / │   \ ┃   ` │   ( │   ) │   ; │   ' ┃     ┆     ┆
// ╭╌╌╌╌╌╂─────┼─────┼─────┼─────┼─────╂─────┼─────┼─────┼─────┼─────╂╌╌╌╌╌┴╌╌╌╌╌╯
// ┆     ┃  *~ │     │     │  *” │     ┃     │  *¸ │  *, │  *˛ │     ┃
// ┆   _ ┃   ~ │   | │   & │   " │   @ ┃     │   { │   } │   [ │   ] ┃
// ╰╌╌╌╌╌┸─────┴─────┴─────┴─────┴─────┸─────┴─────┴─────┴─────┴─────┚

partial alphanumeric_keys modifier_keys
xkb_symbols "Kawa" {
    name[group1]= "French Ergo";
    key.type[group1] = "EIGHT_LEVEL";

    // Digits
    key <AE01> {[ 1               , 1               , U2081           , onesuperior     , ssharp          , U1E9E           ]}; // 1 1 ₁ ¹ ß ẞ
    key <AE02> {[ 2               , guillemotleft   , U2082           , twosuperior     , infinity        , VoidSymbol      ]}; // 2 « ₂ ² ∞
    key <AE03> {[ 3               , guillemotright  , U2083           , threesuperior   , ntilde          , Ntilde          ]}; // 3 » ₃ ³ ñ Ñ
    key <AE04> {[ 4               , 4               , U2084           , U2074           , section         , VoidSymbol      ]}; // 4 4 ₄ ⁴ §
    key <AE05> {[ 5               , 5               , U2085           , U2075           , paragraph       , VoidSymbol      ]}; // 5 5 ₅ ⁵ ¶
    key <AE06> {[ 6               , 6               , U2086           , U2076           , trademark       , U201A           ]}; // 6 6 ₆ ⁶ ™ ‚
    key <AE07> {[ 7               , 7               , U2087           , U2077           , sterling        , U2018           ]}; // 7 7 ₇ ⁷ £ ‘
    key <AE08> {[ 8               , 8               , U2088           , U2078           , degree          , U2019           ]}; // 8 8 ₈ ⁸ ° ’
    key <AE09> {[ 9               , 9               , U2089           , U2079           , copyright       , VoidSymbol      ]}; // 9 9 ₉ ⁹ ©
    key <AE10> {[ 0               , ellipsis        , U2080           , U2070           , EuroSign        , VoidSymbol      ]}; // 0 … ₀ ⁰ €

    // Letters, first row
    key <AD01> {[ x               , X               , asciicircum     , dead_circumflex , ocircumflex     , Ocircumflex     ]}; // x X ^ ^ ô Ô
    key <AD02> {[ comma           , exclam          , exclam          , notsign         , acircumflex     , Acircumflex     ]}; // , ! ! ¬ â Â
    key <AD03> {[ eacute          , Eacute          , equal           , notequal        , icircumflex     , Icircumflex     ]}; // é É = ≠ î Î
    key <AD04> {[ p               , P               , dollar          , dead_currency   , ucircumflex     , Ucircumflex     ]}; // p P $ ¤ û Û
    key <AD05> {[ b               , B               , percent         , U2030           , mu              , VoidSymbol      ]}; // b B % ‰ µ
    key <AD06> {[ f               , F               , numbersign      , dead_abovering  , quotedbl        , U201E           ]}; // f F # ˚ " „
    key <AD07> {[ m               , M               , less            , lessthanequal   , guillemotleft   , U201C           ]}; // m M < ≤ « “
    key <AD08> {[ l               , L               , greater         , greaterthanequal, guillemotright  , U201D           ]}; // l L > ≥ » ”
    key <AD09> {[ U2019           , question        , question        , VoidSymbol      , U2022           , questiondown    ]}; // ’ ? ?   • ¿
    key <AD10> {[ period          , colon           , colon           , dead_caron      , periodcentered  , exclamdown      ]}; // . : : ˇ · ¡

    // Letters, second row
    key <AC01> {[ o               , O               , asterisk        , multiply        , ecircumflex     , Ecircumflex     ]}; // o O * × ê Ê
    key <AC02> {[ a               , A               , plus            , plusminus       , agrave          , Agrave          ]}; // a A + ± à À
    key <AC03> {[ i               , I               , minus           , dead_macron     , minus           , U2011           ]}; // i I - ˉ - ‑
    key <AC04> {[ t               , T               , slash           , division        , ugrave          , Ugrave          ]}; // t T / ÷ ù Ù
    key <AC05> {[ g               , G               , backslash       , dead_stroke     , dead_greek      , VoidSymbol      ]}; // g G \ / µ
    key <AC06> {[ v               , V               , grave           , dead_grave      , ssharp          , U1E9E           ]}; // v V ` ` ß ẞ
    key <AC07> {[ s               , S               , parenleft       , dead_acute      , parenleft       , VoidSymbol      ]}; // s S ( ´ (
    key <AC08> {[ n               , N               , parenright      , VoidSymbol      , parenright      , VoidSymbol      ]}; // n N )   )
    key <AC09> {[ r               , R               , semicolon       , dead_breve      , ntilde          , Ntilde          ]}; // r R ; ˘ ñ Ñ
    key <AC10> {[ u               , U               , apostrophe      , VoidSymbol      , ellipsis        , VoidSymbol      ]}; // u U '   …

    // Letters, third row
    key <AB01> {[ q               , Q               , asciitilde      , dead_tilde      , oe              , OE              ]}; // q Q ~ ~ œ Œ
    key <AB02> {[ z               , Z               , bar             , brokenbar       , ae              , AE              ]}; // z Z | ¦ æ Æ
    key <AB03> {[ y               , Y               , ampersand       , VoidSymbol      , idiaeresis      , Idiaeresis      ]}; // y Y &   ï Ï
    key <AB04> {[ d               , D               , quotedbl        , dead_doubleacute, endash          , emdash          ]}; // d D " ˝ – —
    key <AB05> {[ j               , J               , at              , VoidSymbol      , at              , VoidSymbol      ]}; // j J @   @
    key <AB06> {[ k               , K               , VoidSymbol      , VoidSymbol      , EuroSign        , VoidSymbol      ]}; // k K     €
    key <AB07> {[ c               , C               , braceleft       , dead_cedilla    , ccedilla        , Ccedilla        ]}; // c C { ¸ ç Ç
    key <AB08> {[ h               , H               , braceright      , dead_belowcomma , dead_diaeresis  , VoidSymbol      ]}; // h H } , ¨
    key <AB09> {[ w               , W               , bracketleft     , dead_ogonek     , underscore      , underscore      ]}; // w W [ ˛ _ _
    key <AB10> {[ ISO_Level5_Latch, semicolon       , bracketright    , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // ' ; ]

    // Pinky keys
    key <AE11> {[ slash           , slash           , agrave          , Agrave          , division        , VoidSymbol      ]}; // / / à À ÷
    key <AE12> {[ asterisk        , asterisk        , ecircumflex     , Ecircumflex     , multiply        , VoidSymbol      ]}; // * * ê Ê ×
    key <AE13> {[ VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; //
    key <AD11> {[ equal           , notequal        , VoidSymbol      , VoidSymbol      , U2248           , notequal        ]}; // = ≠     ≈ ≠
    key <AD12> {[ plus            , plus            , VoidSymbol      , VoidSymbol      , plusminus       , VoidSymbol      ]}; // + +     ±
    key <AC11> {[ minus           , minus           , VoidSymbol      , VoidSymbol      , U2212           , VoidSymbol      ]}; // - -     −
    key <AB11> {[ VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; //
    key <TLDE> {[ ccedilla        , Ccedilla        , VoidSymbol      , VoidSymbol      , VoidSymbol      , VoidSymbol      ]}; // ç Ç
    key <BKSL> {[ apostrophe      , question        , VoidSymbol      , VoidSymbol      , U2022           , questiondown    ]}; // ' ?     • ¿
    key <LSGT> {[ e               , E               , underscore      , VoidSymbol      , egrave          , Egrave          ]}; // e E _   è È

    // Space bar
    key <SPCE> {[ space           , U202F           , space           , nobreakspace    , minus           , minus           ]}; //         - -

    // The AltGr key is an ISO_Level3_Shift:
    include "level3(ralt_switch)"

    // The “OneDeadKey” is an ISO_Level5_Latch, which is activated by this:
    // (note: MDSW [Mode_switch] is an alias for LVL5 on recent versions of XKB)
    replace key <MDSW> {
        type[Group1] = "ONE_LEVEL",
        symbols[Group1] = [ ISO_Level5_Shift ]
    };
    modifier_map Mod3 { <MDSW> };
};
// vim: ft=xkb:fdm=indent:ts=4:nowrap
